{"version":3,"sources":["components/WButton.js","components/WMenu.js","components/WItem.js","api/getWeather.js","components/WMonitor.js","App.js","index.js"],"names":["WButton","city","country","selected","change","type","onClick","disabled","className","WMenu","defaultProps","WItem","data","hasData","Object","keys","length","day","width","height","src","icon_path","alt","circle","temp","temp_text","location","a","FULL_API_URL","fetch","result","status","json","success","error","statusText","message","WMonitor","React","useState","weatherData","setWeatherData","useEffect","getLocationWeather","getWeather","map","moment","isSame","datetime","format","weather","icon","Math","round","description","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setTimeout","saveToLocalStorage","localStorage","setItem","JSON","stringify","App","storedLocation","getItem","parse","defaultLocation","readFromLocalStorage","setLocation","newLocation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baedee7a.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst WButton = ({ city, country, selected, change }) => {\n    return (\n        <button \n            type=\"button\" \n            onClick={() => change(city, country)} \n            disabled={selected.city === city}\n            className={`btn${selected.city === city ? ' selected': ''}`}\n        >\n            {city}\n        </button>\n    );\n}\n\nWButton.propTypes = {\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    selected: PropTypes.shape({\n        city: PropTypes.string,\n        country: PropTypes.string \n    }).isRequired,\n    change: PropTypes.func.isRequired\n};\n\nexport default WButton;","import PropTypes from \"prop-types\";\nimport WButton from './WButton';\n\nconst WMenu = ({ selected, change }) => {\n    return (\n        <div className=\"menu\">\n            <WButton selected={selected} change={change} city=\"Ottawa\" country=\"CA\" />\n            <WButton selected={selected} change={change} city=\"Moscow\" country=\"RU\" />\n            <WButton selected={selected} change={change} city=\"Tokyo\" country=\"JP\" />\n        </div>\n    );\n}\n\nWMenu.propTypes = {\n    selected: PropTypes.shape({\n        city: PropTypes.string,\n        country: PropTypes.string \n    }),\n    change: PropTypes.func\n};\n\nWMenu.defaultProps = {\n    selected: {},\n    change: () => {}\n};\n\nexport default WMenu;","import PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\n\nconst WItem = ({ type, data }) => {\n    const hasData =  Object.keys(data).length !== 0;\n\n    return (\n        <div className={`item ${type}`}>\n            <div className=\"day\">{hasData ? data.day : <Skeleton width=\"100%\" height=\"100%\" />}</div>\n            <div className=\"info\">\n                <div className=\"icon-container\">\n                    <div className=\"img\">\n                        {hasData ? (\n                            <img \n                                src={hasData ? data.icon_path : null} \n                                alt=\"Weather Icon\" \n                            />\n                        ) : ( \n                            <Skeleton circle height={type === \"lg\" ? 120 : 50} width={type === \"lg\" ? 120 : 50} />\n                        )}\n                    </div>\n                </div>\n                <div className={`temp-container${ hasData ? '' : ' loading'}`}>\n                    <div className=\"temp\">\n                        {hasData ? data.temp : <Skeleton width=\"100%\" height=\"100%\" />}\n                        {hasData ? ( <span>&#176;</span> ) : null}\n                    </div>\n                    {data && data.temp_text && type === \"lg\" ? <div className=\"temp-text\">{data.temp_text}</div> : null }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nWItem.propTypes = {\n    type: PropTypes.string,\n    data: PropTypes.shape({\n        day: PropTypes.string,\n        icon_path: PropTypes.string,\n        temp: PropTypes.number,\n        temp_text: PropTypes.string,\n    })\n};\n\nWItem.defaultProps = {\n    type: \"\",\n    data: {}\n};\n\n\n\nexport default WItem;","export default async (location) => {\n    const API_URL = 'https://api.weatherbit.io/v2.0/forecast/daily';\n    const API_KEY = \"b6494ce54de54be6a89271638f3f5cd7\";\n    const FULL_API_URL = `${API_URL}?city=${location.city}&country=${location.country}&days=5&units=M&key=${API_KEY}`;\n\n    try {\n        const result = await fetch(FULL_API_URL);\n\n        if (result.status === 200) {\n            return { success: true, data: await result.json() };\n        }\n\n        return { success: false, error: result.statusText };\n    } catch (ex) {\n        return { success: false, error: ex.message };\n    }\n};","import React from 'react';\nimport PropTypes from \"prop-types\";  \nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport moment from 'moment';\nimport WItem from './WItem';\nimport getWeather  from '../api/getWeather';\n\nconst WMonitor = ({ location }) => {\n\n    const prepareData = (forecast) => {\n        return forecast.data.map(day => {\n            return {\n                'day': moment().isSame(moment(day.datetime), 'day')  ? 'Today' : moment(day.datetime).format('ddd'),\n                'icon_path': `https://www.weatherbit.io/static/img/icons/${day.weather.icon}.png`,\n                'temp': Math.round(day.temp),\n                'temp_text': day.weather.description\n            }\n        });\n    };\n\n    const [weatherData, setWeatherData] = React.useState([]);\n\n    React.useEffect(() => {\n        const getLocationWeather = async () => {\n            const result = await getWeather(location);\n            setWeatherData(result.success ? prepareData(result.data) : []);\n            if(!result.success) {\n                toast.error(`Error! ${result.error}`, {\n                    position: \"top-right\",\n                    autoClose: 10000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        };\n        setWeatherData([]);\n        setTimeout(() => { getLocationWeather(); }, 1000);\n    }, [location]);\n\n    return (\n        <div className=\"monitor\">\n            <ToastContainer />\n            <div className=\"header\">\n                <WItem type=\"lg\" data={weatherData[0]} />\n            </div>\n            <div className=\"footer\">\n                <WItem type=\"sm\" data={weatherData[1]} />\n                <WItem type=\"sm\" data={weatherData[2]} />\n                <WItem type=\"sm\" data={weatherData[3]} />\n                <WItem type=\"sm\" data={weatherData[4]} />\n            </div>\n        </div>\n    );\n}\n\nWMonitor.propTypes = {\n    location: PropTypes.shape({\n        city: PropTypes.string,\n        country: PropTypes.string\n    })\n};\n\nWMonitor.defaultProps = {\n    location: {}\n};\n\nexport default WMonitor;","import { useState } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport './App.less';\nimport WMenu from './components/WMenu';\nimport WMonitor from './components/WMonitor';\n\n\nfunction saveToLocalStorage(location) {\n    localStorage.setItem(\"location\", JSON.stringify(location));\n}\n\nfunction readFromLocalStorage() {\n    const storedLocation = localStorage.getItem(\"location\");\n    if(storedLocation) {\n        return JSON.parse(storedLocation);\n    }\n    toast(\"🌞 J's Weather App 🌞\", {\n        position: \"top-left\",\n        autoClose: 4000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n    const defaultLocation = { city: \"Ottawa\", country: \"CA\" };\n    saveToLocalStorage(defaultLocation);\n    return defaultLocation;\n}\n\nconst App = () => {\n    const [location, setLocation] = useState(readFromLocalStorage());\n\n    const changeLocation = (city, country) => {\n        const newLocation = { city, country };\n        setLocation(newLocation);\n        saveToLocalStorage(newLocation);\n    }\n\n    return (\n        <div className=\"weather-app\">\n            <ToastContainer />\n            <div className=\"container\">\n                <WMenu selected={location} change={changeLocation} />\n                <WMonitor location={location} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/fonts/Daikon/Daikon.css';\nimport './assets/fonts/Teko/Teko.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}